"""
inspect_utils.py

–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∫ DataFrame —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏:
- `inspect_row_html`: —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ DataFrame, –≤–∫–ª—é—á–∞—è –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –∏—Å—Ç–∏–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ –ª–æ–≥ –∞–≥–µ–Ω—Ç–∞.
- `inspect_row`: –≤—ã–≤–æ–¥–∏—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML-–±–ª–æ–∫ –≤ —è—á–µ–π–∫–µ Jupyter Notebook —á–µ—Ä–µ–∑ IPython.display.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–µ–π—Å—ã, –≥–¥–µ –º–æ–¥–µ–ª—å –æ—à–∏–±–∞–µ—Ç—Å—è, –∞ —Ç–∞–∫–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤ agent_log (–µ—Å–ª–∏ –µ—Å—Ç—å). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ª–∞–¥–∫–∏ –º–æ–¥–µ–ª–µ–π, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫.

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
- `df`: pandas DataFrame —Å –ø–æ–ª—è–º–∏, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
- `idx`: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ DataFrame.
- `pred_col`: –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏.
- `label_col`: –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –∏—Å—Ç–∏–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `RELEVANCE_COL` –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏).

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
–í–∏–∑—É–∞–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π HTML-–±–ª–æ–∫ —Å —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–º—Å—è –ª–æ–≥–æ–º –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- IPython.display
- pandas
- utils.config (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ `RELEVANCE_COL`)
"""

import pandas as pd
from IPython.display import display, HTML
from utils.config import RELEVANCE_COL

def inspect_row_html(row, idx, *, pred_col="pred_relevance", label_col=RELEVANCE_COL):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç HTML –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∫–∏ DataFrame."""
    
    def safe_get(key):
        return row[key] if key in row and pd.notna(row[key]) else "‚Äî"

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
    agent_log_html = ""
    if "agent_log" in row and pd.notna(row["agent_log"]):
        agent_log_html = f"""
        <details style="margin-top:10px;">
            <summary style="cursor:pointer;"><strong>üß† Agent log (—Ä–∞—Å–∫—Ä—ã—Ç—å)</strong></summary>
            <pre style="white-space:pre-wrap; background:#eee; padding:10px; border-radius:6px;">
{row['agent_log']}
            </pre>
        </details>
        """

    return f"""
<div style="border:1px solid #ccc; padding:16px; border-radius:10px;
            font-family:sans-serif; background-color:#f9f9f9; margin-bottom:20px">
  <h2>üìå Index: {idx}</h2>
  <p><strong>–ó–∞–ø—Ä–æ—Å:</strong><br>{safe_get('text')}</p>
  <p><strong>–ê–¥—Ä–µ—Å:</strong><br>{safe_get('address')}</p>
  <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong><br>{safe_get('name')}</p>
  <p><strong>ID –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</strong><br>{safe_get('permalink')}</p>
  <p><strong>–†—É–±—Ä–∏–∫–∞:</strong><br>{safe_get('normalized_main_rubric_name_ru')}</p>
  <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong><br>{safe_get('prices_summarized')}</p>
  <p><strong>–ò—Å—Ç–∏–Ω–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:</strong> {safe_get(label_col)}</p>
  <p><strong>–û—Ç–∑—ã–≤—ã:</strong><br>{safe_get('reviews_summarized')}</p>
  <p><strong>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ({pred_col}):</strong><br>{safe_get(pred_col)}</p>
  {agent_log_html}
</div>
"""

def inspect_row(df, idx, *, pred_col="pred_relevance", label_col=RELEVANCE_COL):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç HTML-–±–ª–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∫–∏ DataFrame."""
    row = df.loc[idx]
    html_block = inspect_row_html(row, idx, pred_col=pred_col, label_col=label_col)
    display(HTML(html_block))

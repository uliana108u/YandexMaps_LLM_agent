# agent_runner.py

import os
import sys
import argparse
import logging
from dotenv import load_dotenv

# –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

def main(version="v1", batch_size=5):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
    from utils.config import BASE_DIR
    if BASE_DIR not in sys.path:
        sys.path.insert(0, BASE_DIR)

    # –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è BASE_DIR
    from utils.data_loader import load_dataset
    from utils.config import (
        DATA_PATH, AGENT_RESULTS_DIR, ENV_PATH,
        validate_config, create_directories
    )
    from agent.eval_agent import RelevanceAgentEvaluator

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv(ENV_PATH)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    issues = validate_config()
    if issues:
        raise RuntimeError("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(issues))

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    create_directories()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(DATA_PATH):
        raise FileNotFoundError(f"–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATA_PATH}")
    train_data, val_data, test_data = load_dataset(DATA_PATH, drop_uncertain=True, val_frac=0.01)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. Train: {len(train_data)}, Val: {len(val_data)}, Test: {len(test_data)}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent_evaluator = RelevanceAgentEvaluator(use_cache=True, prompt_version=version)

    # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤–µ—Ä—Å–∏—è –ø—Ä–æ–º—Ç–∞: {version})...")
    val_preds, val_acc = agent_evaluator.run_full_evaluation(val_data, batch_size=batch_size)
    print(f"‚úÖ Validation accuracy: {val_acc:.4f}")

    # –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–µ
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ —Ç–µ—Å—Ç–µ (–≤–µ—Ä—Å–∏—è –ø—Ä–æ–º—Ç–∞: {version})...")
    test_preds, test_acc = agent_evaluator.run_full_evaluation(test_data, batch_size=batch_size)
    print(f"‚úÖ Test accuracy: {test_acc:.4f}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    val_filename = os.path.join(AGENT_RESULTS_DIR, f"agent_val_predictions_{version}.csv")
    test_filename = os.path.join(AGENT_RESULTS_DIR, f"agent_test_predictions_{version}.csv")

    val_preds.to_csv(val_filename, index=False)
    test_preds.to_csv(test_filename, index=False)
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n- {val_filename}\n- {test_filename}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.")
    parser.add_argument("--version", type=str, default="v1", help="–í–µ—Ä—Å–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: v1, v2, v3)")
    parser.add_argument("--batch_size", type=int, default=5, help="–†–∞–∑–º–µ—Ä batch'–∞ –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
    args = parser.parse_args()

    # –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    main(version=args.version, batch_size=args.batch_size)
